{"version":3,"sources":["components/CreateRoom.js","components/Peer.js","components/Menubar.js","components/Room.js","App.js","reportWebVitals.js","index.js"],"names":["CreateRoom","props","onClick","id","uuid","history","push","createPeer","userToSignal","callerID","stream","socketRef","peer","Peer","initiator","trickle","getTracks","forEach","track","addTrack","err","console","log","on","data","current","emit","addPeer","incomingSignal","error","signal","Menubar","audio","video","leaveRoom","shareScreen","audioTracks","enabled","toggleAudio","videoTracks","toggleVideo","Container","styled","div","StyledVideo","Video","ref","useRef","useEffect","srcObject","playsInline","autoPlay","constraints","echoCancellation","width","min","height","Room","useState","peers","setPeers","setAudio","setVideo","userVideo","peersRef","userStream","roomID","match","params","a","io","connect","navigator","mediaDevices","getUserMedia","isMuted","getAudioTracks","isOn","getVideoTracks","users","peerUserID","peerID","payload","find","p","peerLeft","destroy","newPeers","filter","videoChat","getDisplayMedia","cursor","screenTrack","replaceTrack","onended","muted","map","stop","disconnect","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.338e4fbb.chunk.js","sourcesContent":["import React from \"react\";\nimport { v1 as uuid } from \"uuid\"; // to generate random roomId(s)\n\nconst CreateRoom = (props) => {\n  const create = () => {\n    const id = uuid();\n    props.history.push(`/room/${id}`); // redirect to a randomly generated room and push to history stack\n  };\n\n  return <button onClick={create}>Create room</button>;\n};\n\nexport default CreateRoom;\n","import Peer from \"simple-peer\";\n\n// called when \"joiner\" creates a peer connection\nexport function createPeer(userToSignal, callerID, stream, socketRef) {\n  const peer = new Peer({\n    initiator: true,\n    trickle: false,\n    // stream,\n  });\n\n  try {\n    stream.getTracks().forEach((track) => peer.addTrack(track, stream));\n  } catch (err) {\n    console.log(`Error in createPeer: ${err}`);\n  }\n\n  // \"signal\" is triggered once the peer object is created\n  peer.on(\"signal\", (data) => {\n    // create an offer to the peer via the backend\n    socketRef.current.emit(\"offer\", { userToSignal, callerID, data });\n  });\n\n  return peer;\n}\n\n// called when person in the call makes a peer connection with the \"joiner\"\nexport function addPeer(incomingSignal, callerID, stream, socketRef) {\n  const peer = new Peer({\n    initiator: false, // person who is already in the call is not the initiator\n    trickle: false,\n    // stream,\n  });\n\n  try {\n    stream.getTracks().forEach((track) => peer.addTrack(track, stream));\n  } catch (error) {\n    console.log(`Error in addPeer: ${error}`);\n  }\n\n  // \"signal\" is triggered once the peer object is created\n  peer.on(\"signal\", (data) => {\n    // accept the offer via the backend\n    socketRef.current.emit(\"answer\", { data, callerID });\n  });\n\n  // establish connection\n  peer.signal(incomingSignal);\n\n  return peer;\n}\n","import React from \"react\";\n\nconst Menubar = ({ audio, video, leaveRoom, shareScreen }) => {\n  return (\n    <div>\n      <button onClick={() => toggleAudio(audio)}>Mute</button>\n      <button onClick={() => toggleVideo(video)}>Video</button>\n      <button onClick={() => leaveRoom()}>Leave</button>\n      <button onClick={() => shareScreen()}>Share Screen</button>\n    </div>\n  );\n};\n\nfunction toggleAudio(audio) {\n  if (audio && audio.audioTracks) {\n    audio.audioTracks.forEach((track) => (track.enabled = !track.enabled));\n  }\n}\n\nfunction toggleVideo(video) {\n  if (video && video.videoTracks) {\n    video.videoTracks.forEach((track) => (track.enabled = !track.enabled));\n  }\n}\n\nexport default Menubar;\n","// built in react\nimport { useEffect, useRef, useState } from \"react\";\n\n// external packages\nimport io from \"socket.io-client\";\nimport styled from \"styled-components\";\n\n// internal components\nimport { createPeer, addPeer } from \"./Peer\";\nimport Menubar from \"./Menubar\";\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  height: 100vh;\n  width: 90%;\n  margin: auto;\n  flex-wrap: wrap;\n`;\n\nconst StyledVideo = styled.video`\n  height: 40%;\n  width: 50%;\n`;\n\nconst Video = (props) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    props.peer.on(\"stream\", (stream) => {\n      ref.current.srcObject = stream;\n    });\n  }, []);\n\n  return <StyledVideo playsInline autoPlay ref={ref} />;\n};\n\nconst constraints = {\n  audio: { echoCancellation: true },\n  video: {\n    width: { min: 1280 },\n    height: { min: 720 },\n  },\n};\n\nconst Room = (props) => {\n  const [peers, setPeers] = useState([]);\n  const [audio, setAudio] = useState({});\n  const [video, setVideo] = useState({});\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const userStream = useRef();\n\n  useEffect(() => {\n    const roomID = props.match.params.roomID;\n    const videoChat = async () => {\n      socketRef.current = io.connect(\"/\");\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      userStream.current = stream;\n      userVideo.current.srcObject = stream;\n      setAudio({ isMuted: false, audioTracks: stream.getAudioTracks() });\n      setVideo({ isOn: true, videoTracks: stream.getVideoTracks() });\n      socketRef.current.emit(\"join-room\", roomID);\n\n      socketRef.current.on(\"room-full\", () =>\n        console.log(\"Sorry the room is full!\")\n      );\n\n      socketRef.current.on(\"all-users\", (users) => {\n        const peers = [];\n        users.forEach((peerUserID) => {\n          const peer = createPeer(\n            peerUserID,\n            socketRef.current.id,\n            stream,\n            socketRef\n          );\n\n          peersRef.current.push({\n            peerID: peerUserID,\n            peer,\n          });\n          peers.push({\n            peerID: peerUserID,\n            peer,\n          });\n        });\n        setPeers([...peersRef.current]);\n      });\n\n      socketRef.current.on(\"user-joined\", (payload) => {\n        const peer = addPeer(payload.data, payload.callerID, stream, socketRef);\n\n        peersRef.current.push({\n          peerID: payload.callerID,\n          peer,\n        });\n        setPeers([...peersRef.current]);\n      });\n\n      socketRef.current.on(\"receiving-answer\", (payload) => {\n        const item = peersRef.current.find((p) => p.peerID === payload.id);\n        item.peer.signal(payload.data);\n      });\n\n      socketRef.current.on(\"user-left\", (id) => {\n        const peerLeft = peersRef.current.find((p) => p.peerID === id);\n        if (peerLeft) {\n          peerLeft.peer.destroy();\n        }\n        const newPeers = peersRef.current.filter((p) => p.peerID !== id);\n        peersRef.current = newPeers;\n        setPeers(newPeers);\n      });\n    };\n    videoChat();\n  }, []);\n\n  const leaveRoom = () => {\n    userVideo.current.srcObject.getTracks().forEach((track) => track.stop());\n    peersRef.current = null;\n    setPeers(peersRef.current);\n    socketRef.current.disconnect();\n    props.history.push(`/`);\n  };\n\n  const shareScreen = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getDisplayMedia({\n        cursor: true,\n      });\n      const screenTrack = stream.getTracks()[0];\n      peersRef.current.forEach((p) => {\n        p.peer.replaceTrack(\n          video.videoTracks[0],\n          screenTrack,\n          userStream.current\n        );\n      });\n      screenTrack.onended = () =>\n        peersRef.current.forEach((p) => {\n          p.peer.replaceTrack(\n            screenTrack,\n            video.videoTracks[0],\n            userStream.current\n          );\n        });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <Container>\n      <StyledVideo muted ref={userVideo} autoPlay playsInline />\n      {peers.map((peer) => {\n        return <Video key={peer.peerID} peer={peer.peer} />;\n      })}\n      <Menubar\n        audio={audio}\n        video={video}\n        leaveRoom={leaveRoom}\n        shareScreen={shareScreen}\n      />\n    </Container>\n  );\n};\n\nexport default Room;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport CreateRoom from \"./components/CreateRoom\";\nimport Room from \"./components/Room\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={CreateRoom} />\n        <Route path=\"/room/:roomID\" component={Room} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}