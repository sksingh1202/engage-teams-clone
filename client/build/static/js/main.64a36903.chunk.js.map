{"version":3,"sources":["components/CreateRoom.js","components/Peer.js","components/Room.js","App.js","reportWebVitals.js","index.js"],"names":["CreateRoom","props","onClick","id","uuid","history","push","createPeer","userToSignal","callerID","stream","socketRef","peer","Peer","initiator","trickle","on","data","current","emit","addPeer","incomingSignal","signal","Container","styled","div","StyledVideo","video","Video","ref","useRef","useEffect","srcObject","playsInline","autoPlay","constraints","audio","echoCancellation","width","min","height","Room","useState","peers","setPeers","userVideo","peersRef","roomID","match","params","a","io","connect","navigator","mediaDevices","getUserMedia","console","log","users","forEach","peerUserID","peerID","payload","find","p","videoChat","muted","map","index","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64a36903.chunk.js","sourcesContent":["import React from \"react\";\nimport { v1 as uuid } from \"uuid\"; // to generate random roomId(s)\n\nconst CreateRoom = (props) => {\n  const create = () => {\n    const id = uuid();\n    props.history.push(`/room/${id}`); // redirect to a randomly generated room and push to history stack\n  };\n\n  return <button onClick={create}>Create room</button>;\n};\n\nexport default CreateRoom;\n","import Peer from \"simple-peer\";\n\n// called when \"joiner\" creates a peer connection\nexport function createPeer(userToSignal, callerID, stream, socketRef) {\n  const peer = new Peer({\n    initiator: true,\n    trickle: false,\n    stream,\n  });\n\n  // \"signal\" is triggered once the peer object is created\n  peer.on(\"signal\", (data) => {\n    // create an offer to the peer via the backend\n    socketRef.current.emit(\"offer\", { userToSignal, callerID, data });\n  });\n\n  return peer;\n}\n\n// called when person in the call makes a peer connection with the \"joiner\"\nexport function addPeer(incomingSignal, callerID, stream, socketRef) {\n  const peer = new Peer({\n    initiator: false, // person who is already in the call is not the initiator\n    trickle: false,\n    stream,\n  });\n\n  // \"signal\" is triggered once the peer object is created\n  peer.on(\"signal\", (data) => {\n    // accept the offer via the backend\n    socketRef.current.emit(\"answer\", { data, callerID });\n  });\n\n  // establish connection\n  peer.signal(incomingSignal);\n\n  return peer;\n}\n","// built in react\nimport { useEffect, useRef, useState } from \"react\";\n\n// external packages\nimport io from \"socket.io-client\";\nimport styled from \"styled-components\";\n\n// internal components\nimport { createPeer, addPeer } from \"./Peer\";\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  height: 100vh;\n  width: 90%;\n  margin: auto;\n  flex-wrap: wrap;\n`;\n\nconst StyledVideo = styled.video`\n  height: 40%;\n  width: 50%;\n`;\n\nconst Video = (props) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    props.peer.on(\"stream\", (stream) => {\n      ref.current.srcObject = stream;\n    });\n  }, []);\n\n  return <StyledVideo playsInline autoPlay ref={ref} />;\n};\n\nconst constraints = {\n  audio: { echoCancellation: true },\n  video: {\n    width: { min: 1280 },\n    height: { min: 720 },\n  },\n};\n\nconst Room = (props) => {\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const roomID = props.match.params.roomID;\n\n  useEffect(() => {\n    videoChat();\n  }, []);\n\n  async function videoChat() {\n    socketRef.current = io.connect(\"/\");\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    userVideo.current.srcObject = stream;\n    socketRef.current.emit(\"join-room\", roomID);\n\n    socketRef.current.on(\"room-full\", () =>\n      console.log(\"Sorry the room is full!\")\n    );\n\n    socketRef.current.on(\"all-users\", (users) => {\n      const peers = [];\n      users.forEach((peerUserID) => {\n        const peer = createPeer(\n          peerUserID,\n          socketRef.current.id,\n          stream,\n          socketRef\n        );\n        peersRef.current.push({\n          peerID: peerUserID,\n          peer,\n        });\n        peers.push(peer);\n      });\n      setPeers(peers);\n    });\n\n    socketRef.current.on(\"user-joined\", (payload) => {\n      const peer = addPeer(payload.data, payload.callerID, stream, socketRef);\n      peersRef.current.push({\n        peerID: payload.callerID,\n        peer,\n      });\n\n      setPeers((users) => [...users, peer]);\n    });\n\n    socketRef.current.on(\"receiving-answer\", (payload) => {\n      const item = peersRef.current.find((p) => p.peerID === payload.id);\n      item.peer.signal(payload.data);\n    });\n  }\n\n  return (\n    <Container>\n      <StyledVideo muted ref={userVideo} autoPlay playsInline />\n      {peers.map((peer, index) => {\n        return <Video key={index} peer={peer} />;\n      })}\n    </Container>\n  );\n};\n\nexport default Room;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport CreateRoom from \"./components/CreateRoom\";\nimport Room from \"./components/Room\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={CreateRoom} />\n        <Route path=\"/room/:roomID\" component={Room} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}